# top-most EditorConfig file
root = true

# Don't use tabs for indentation.
[*]
indent_style = space

# Code files
[*.{cs,csx}]
indent_size = 4

# Xml project files
[*.{csproj,proj,projitems,shproj}]
indent_size = 2

# Xml config files
[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}]
indent_size = 2

# JSON files
[*.json]
indent_size = 2

# Dotnet code style settings:
[*.{cs}]
# Sort using and Import directives with System.* appearing first
dotnet_sort_system_directives_first                        = true
# Avoid "this." and "Me." if not necessary
dotnet_style_qualification_for_field                       = false : suggestion
dotnet_style_qualification_for_property                    = false : suggestion
dotnet_style_qualification_for_method                      = false : suggestion
dotnet_style_qualification_for_event                       = false : suggestion

# Use language keywords instead of framework type names for type references
dotnet_style_predefined_type_for_locals_parameters_members = true : error
dotnet_style_predefined_type_for_member_access             = true : error

# Suggest more modern language features when available
dotnet_style_object_initializer                            = true : suggestion
dotnet_style_collection_initializer                        = true : suggestion
dotnet_style_coalesce_expression                           = true : suggestion
dotnet_style_null_propagation                              = true : suggestion
dotnet_style_explicit_tuple_names                          = true : warning

# CSharp code style settings:

[*.cs]
# Prefer "var" everywhere
csharp_style_var_for_built_in_types                             = false : warning
csharp_style_var_when_type_is_apparent                          = true : suggestion
csharp_style_var_elsewhere                                      = true : suggestion

# Prefer method-like constructs to have a block body
csharp_style_expression_bodied_methods                          = false : none
csharp_style_expression_bodied_constructors                     = false : none
csharp_style_expression_bodied_operators                        = false : none

# Prefer property-like constructs to have an expression-body
csharp_style_expression_bodied_properties                       = true : none
csharp_style_expression_bodied_indexers                         = true : none
csharp_style_expression_bodied_accessors                        = true : none

# Suggest more modern language features when available
csharp_style_pattern_matching_over_is_with_cast_check           = true : suggestion
csharp_style_pattern_matching_over_as_with_null_check           = true : suggestion
csharp_style_inlined_variable_declaration                       = true : suggestion
csharp_style_throw_expression                                   = true : suggestion
csharp_style_conditional_delegate_call                          = true : suggestion

# Newline settings
csharp_new_line_before_open_brace                               = none
csharp_new_line_before_else                                     = false : error
csharp_new_line_before_catch                                    = false : error
csharp_new_line_before_finally                                  = false : error
csharp_new_line_before_members_in_object_initializers           = true
csharp_new_line_before_members_in_anonymous_types               = true


#custom styles
dotnet_naming_style.customPascalStyle.capitalization               = pascal_case
dotnet_naming_style.customFullUppercaseStyle.capitalization        = all_upper
dotnet_naming_style.customCamelCaseStyle.capitalization            = camel_case
dotnet_naming_style.all_variables.required_prefix                  = [a-zA-z]

#naming styles
# Methods Be PascalCased
dotnet_naming_rule.all_methods_pascalcased.symbols              = all_methods
dotnet_naming_symbols.all_methods.applicable_kinds              = method
dotnet_naming_symbols.all_methods.applicable_accessibilities    = *
dotnet_naming_rule.all_methods_pascalcased.style                = customPascalStyle
dotnet_naming_rule.all_methods_pascalcased.severity             = error

#Variables Be PascalCased
dotnet_naming_rule.all_variables_camel.symbols                  = all_variables
dotnet_naming_symbols.all_variables.applicable_kinds            = local, parameter
dotnet_naming_symbols.all_variables.applicable_accessibilities  = *
dotnet_naming_rule.all_variables_camel.style                    = customCamelCaseStyle
dotnet_naming_rule.all_variables_camel.severity                 = error


#Properties Be camelCased
dotnet_naming_rule.all_properties_pascalcased.symbols           = all_properties
dotnet_naming_symbols.all_properties.applicable_kinds           = property
dotnet_naming_symbols.all_properties.applicable_accessibilities = *
dotnet_naming_rule.all_properties_pascalcased.style             = customPascalStyle
dotnet_naming_rule.all_properties_pascalcased.severity          = error

#Constants be SHOUTEY
dotnet_naming_rule.all_constants_upper.symbols                  = all_constants
dotnet_naming_symbols.all_constants.required_modifiers          = const
dotnet_naming_symbols.all_constants.applicable_kinds            = field
dotnet_naming_symbols.all_constants.applicable_accessibilities  = *
dotnet_naming_rule.all_constants_upper.style                    = customFullUppercaseStyle
dotnet_naming_rule.all_constants_upper.severity                 = error
